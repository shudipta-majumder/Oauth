# Generated by Django 4.2.7 on 2023-12-04 04:58

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import core.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that userid already exists."
                        },
                        help_text="Required. 55 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=55,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="User ID",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "designation",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        validators=[core.validators.PhoneNumberValidator()],
                    ),
                ),
                (
                    "is_management",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this use should be treated as management. Unselect this instead of deleting accounts.",
                        verbose_name="management",
                    ),
                ),
                (
                    "recommended",
                    models.CharField(
                        choices=[
                            ("yes", "Yes"),
                            ("no", "No"),
                            ("n/a", "Not Applicable"),
                        ],
                        default="n/a",
                        max_length=10,
                        verbose_name="Recommended",
                    ),
                ),
                (
                    "otp_code",
                    models.CharField(
                        blank=True, editable=False, max_length=10, null=True
                    ),
                ),
                (
                    "otp_timestamp",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_by_%(class)s_related",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_by_%(class)s_related",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("can_recommend_salesperson", "Can Recommend Sales Person"),
                    ("has_pms_access", "Has PMS access"),
                ),
            },
        ),
        migrations.CreateModel(
            name="Amd",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth_users.user",),
        ),
        migrations.CreateModel(
            name="Cbo",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth_users.user",),
        ),
        migrations.CreateModel(
            name="EbsUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth_users.user",),
        ),
        migrations.CreateModel(
            name="Incharge",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth_users.user",),
        ),
        migrations.CreateModel(
            name="Management",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth_users.user",),
        ),
        migrations.CreateModel(
            name="Salesman",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth_users.user",),
        ),
    ]
